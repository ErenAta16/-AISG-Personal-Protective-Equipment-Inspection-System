version: '3.8'

services:
  aisg-app:
    build: .
    container_name: aisg-kkd-denetim
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - PYTHONPATH=/app
    volumes:
      - ./models:/app/models
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aisg-network

  # Redis cache (opsiyonel)
  redis:
    image: redis:7-alpine
    container_name: aisg-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aisg-network

  # PostgreSQL database (opsiyonel)
  postgres:
    image: postgres:15-alpine
    container_name: aisg-postgres
    environment:
      POSTGRES_DB: aisg_db
      POSTGRES_USER: aisg_user
      POSTGRES_PASSWORD: aisg_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - aisg-network

  # Nginx reverse proxy (opsiyonel)
  nginx:
    image: nginx:alpine
    container_name: aisg-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - aisg-app
    restart: unless-stopped
    networks:
      - aisg-network

volumes:
  redis_data:
  postgres_data:

networks:
  aisg-network:
    driver: bridge
